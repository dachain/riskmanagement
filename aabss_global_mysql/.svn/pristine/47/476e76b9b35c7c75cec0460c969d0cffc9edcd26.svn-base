package com.newdumai.commonDataChannel.dataSourceHelper;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.nio.charset.Charset;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Map;
import java.util.Set;

import javax.net.ssl.SSLContext;

import org.apache.commons.io.IOUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.conn.socket.LayeredConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContexts;
import org.apache.http.ssl.TrustStrategy;
import org.apache.http.util.EntityUtils;
import org.apache.log4j.Logger;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import com.newdumai.commonDataChannel.dataSourceHelper.SSLClient;

public class DataSourceHelper {

	private static Logger log = Logger.getLogger("DataSourceHelper");
	
	@SuppressWarnings("deprecation")
	public static JsonObject getJsonDataIgnoreSSL(String url, Map<String,?> params){
		if(url!=null){
			url = url.trim();
		}
		LayeredConnectionSocketFactory sslSF = null;
		// 指定信任密钥存储对象和连接套接字工厂
		try {
			KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
			SSLContext sslContext = SSLContexts.custom().loadTrustMaterial(trustStore, new TrustStrategy() {
				@Override
				public boolean isTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
					return true;
				}
			}).build();
			sslSF = new SSLConnectionSocketFactory(sslContext, SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
		} catch (Exception e) {
			log.error("SSL初始化失败!",e);
			throw new RuntimeException(e);
		}
		// 构建客户端
		CloseableHttpClient client = HttpClientBuilder.create().setSSLSocketFactory(sslSF).build();
		URIBuilder builder = null;
		try {
			builder = new URIBuilder(url);
		} catch (URISyntaxException e) {
			log.error("url格式错误", e);
			throw new IllegalArgumentException(e.getMessage());
		}
		builder.setCharset(Charset.forName("UTF-8"));
		if(params!=null){
			Set<String> keySet = params.keySet();
			for(String key : keySet){
				Object value = params.get(key);
				builder.addParameter(key,value==null?"":value.toString());
			}
		}
		URI uri = null;
		try {
			uri = builder.build();
		} catch (URISyntaxException e) {
			log.error("url格式错误", e);
			throw new IllegalArgumentException(e.getMessage());
		}
		HttpGet get = new HttpGet(uri);
		HttpResponse resp;
		try {
			get.setHeader("Content-type", "application/json;charset=UTF-8");
			log.info("请求url:"+uri);
			resp = client.execute(get);
			if(resp.getStatusLine().getStatusCode()!=200){
				log.error("请求[" + url + "]响应状态码为:"+resp.getStatusLine().getStatusCode());
	    		return null;
	    	}
			JsonObject jsonObject = convertResponseBytes2JsonObj(resp);
			return jsonObject;
		} catch (IOException e) {
			log.error("请求url:" + url + "失败! 原因:" + e.getMessage(),e);
		}finally {
			if (null != client) {
				try {
					client.close();
				} catch (IOException e) {
					log.warn(client+ " 关闭失败!",e);
				}
			}
		}
		return null;
	}
	
	 public static JsonObject convertResponseBytes2JsonObj(HttpResponse resp) {
	        JsonObject jsonObject = null;
	        try {
	            InputStream respIs = resp.getEntity().getContent();
	            byte[] respBytes = IOUtils.toByteArray(respIs);
	            String result = new String(respBytes, Charset.forName("UTF-8"));
	            if (null == result || result.length() == 0) {
	                log.info("无响应");
	            } else {
	                if (result.startsWith("{") && result.endsWith("}")) {
	                	JsonParser jsonParser = new JsonParser();
	                    jsonObject = (JsonObject) jsonParser.parse(result);
	                } else {
	                   log.error(result + "不能转成JSON对象:");
	                }
	            }
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        return jsonObject;
	    }
	
	//-----------------------------------------------------------
	@SuppressWarnings("resource")
	public static String doPost(String url, String jsonStr, String charset) throws Exception{
		HttpClient httpClient = new SSLClient();
		HttpPost httpPost = new HttpPost(url);	
		String result = null;
		StringEntity entity = new StringEntity(URLEncoder.encode(jsonStr,charset));
		httpPost.setEntity(entity);			
		HttpResponse response = httpClient.execute(httpPost);
		if(response != null){
			HttpEntity resEntity = response.getEntity();
			if(resEntity != null){
				result = EntityUtils.toString(resEntity,charset);
			}
		}
		return result;
	}
	
	//------------------------------------------------------------------------------
	public CloseableHttpClient getHttpClient(String url) throws Exception {
		if (url.startsWith("https")) {
			String path = "";
			String CRET_FILE_PATH = "cacerts";
			path = this.getClass().getResource("DataSourceHelper.class").getFile();
			path = path.substring(0,path.indexOf("DataSourceHelper.class"))+ "/";
			return getSSLHttpClient(path + CRET_FILE_PATH, "123456");
		}
		return HttpClients.createDefault();
	}
	
	private CloseableHttpClient getSSLHttpClient(String ketstore,String password) throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException, CertificateException, IOException {
			SSLContext sslcontext = SSLContexts.custom().loadTrustMaterial(
					new File(ketstore),
					password.toCharArray(),
					(TrustStrategy) new TrustSelfSignedStrategy()
					).build();
			SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(
					sslcontext, new String[] { "TLSv1" }, null,
					SSLConnectionSocketFactory.getDefaultHostnameVerifier());
			return HttpClients.custom().setSSLSocketFactory(sslsf).build();
	}
	
	public Map<String, String> getBaseParams(Map<String, String> params)throws NoSuchAlgorithmException {
		String APP_ID = "120160805001";
		String PKEY = "4465a59579cbfb01d564088fae77369e";
		String ptime = String.valueOf(System.currentTimeMillis());
		params.put("pname", APP_ID);
		params.put("ptime", ptime);
		params.put("vkey", MD5Util(PKEY, ptime));
		return params;
	}
	
	private String MD5Util(String pkey, String ptime)throws NoSuchAlgorithmException {
		String oriental = pkey + "_" + ptime + "_" + pkey;
		String vkey = new String();
		try {
			MessageDigest md = MessageDigest.getInstance("MD5");
			md.update(oriental.getBytes());
			byte b[] = md.digest();
			int i;
			StringBuffer buf = new StringBuffer("");
			for (int offset = 0; offset < b.length; offset++) {
				i = b[offset];
				if (i < 0)
					i += 256;
				if (i < 16)
					buf.append("0");
				buf.append(Integer.toHexString(i));
			}
			vkey = buf.toString();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		return vkey;
	}
	
	public HttpPost postForm(String url, Map<String, String> params)throws Exception {
		HttpPost httpost = new HttpPost(url.trim());
		MultipartEntityBuilder builder = MultipartEntityBuilder.create();
		builder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);
		for (String key : params.keySet()) {
			builder.addPart(key, new StringBody(params.get(key),ContentType.MULTIPART_FORM_DATA.withCharset("UTF-8")));
		}
		log.info(builder.toString());
		httpost.setEntity(builder.build());
		return httpost;
	}
	
	
}
