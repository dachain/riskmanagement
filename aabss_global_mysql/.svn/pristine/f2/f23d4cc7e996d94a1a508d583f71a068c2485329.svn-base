package com.newdumai.order.control.impl;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.newdumai.loanFront.AuditService;
import com.newdumai.loanFront.OrderInfoService;
import com.newdumai.order.control.AuditAsynchronousThread;
import com.newdumai.sysmgr.BizFunctionSettingsService;
import org.springframework.util.CollectionUtils;

@Component("auditAsynchronousThread")
public class AuditAsynchronousThreadImpl implements AuditAsynchronousThread {

    @Autowired
    private AuditService auditService;
    @Autowired
    private OrderInfoService orderInfoService;

    @Autowired
    private BizFunctionSettingsService bizFunctionSettingsService;

    /**
     * 通过订单code自动审核<br/>
     * 内部判断该订单的业务类型是否启用规则决定是否运行AuditOne
     *
     * @param orderinfoCode 订单code
     */
    @Override
    public void doAuditByOrderId(final String orderinfoCode) {
        Map<String, Object> order = orderInfoService.getByCode(orderinfoCode);
        doAuditByOrder(order);
    }

    /**
     * 通过订单code自动审核<br/>
     * 内部判断该业务类型是否启用规则决定是否运行AuditOne
     *
     * @param orderMap 订单map
     */
    @Override
    public void doAuditByOrder(final Map<String, Object> orderMap) {
        Thread thread = new Thread() {
            public void run() {
                try {
                    System.out.println("************************************");
                    System.out.println("开始自动审核:------"+orderMap.get("name"));
                    String subEntityId = (String) orderMap.get("sub_entity_id");
                    String typeCode = (String) orderMap.get("thetype");
                    Map<String, Object> sys_company_typeMap = bizFunctionSettingsService.getFunctionSettingsBySubentityId(subEntityId, typeCode);
                    if (CollectionUtils.isEmpty(sys_company_typeMap) || "1".equals(sys_company_typeMap.get("rule_model"))) {
                        auditService.auditOne4(orderMap);
                    } else {
                        Map<String, Object> bigLabelMap = auditService.createLabel(orderMap);
                        auditService.auditOne3(orderMap, bigLabelMap);
                    }
                    System.out.println("自动审核结束");
                } catch (Exception e) {
                    e.printStackTrace();
                    System.out.println(e.getCause() + e.getMessage());
                    System.out.println("自动审核异常");
                }finally{
                	System.out.println("************************************");
                }
                try {
					auditService.CreateDh_task_3rd_interface(orderMap);
				} catch (Exception e) {
					e.printStackTrace();
				}
                try {
					auditService.CreateDh_task(orderMap);
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        };
        thread.start();

    }

}
